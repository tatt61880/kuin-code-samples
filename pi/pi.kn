{{{
	pi.kn (for Kuin v.2021.9.17):
		Created by @tatt61880

		下記のサイトを参考に作成しました。
		http://mail2.nara-edu.ac.jp/~asait/c_program/sample0/pi.htm
}}}
const M: int :: 2502
const N: int :: 2078

func main()
	var x: []bit32 :: #[@N]bit32
	var y: []bit32 :: #[@N]bit32
	
	do @Atan(x, 5)
	do @Mul(x, 4b32)
	
	do @Atan(y, 239)
	
	do @Sub(x, y)
	do @Mul(x, 4b32)
	
	do @Display(x)
end func

func Atan(x: []bit32, m: int)
	var e: int
	var m2: bit32
	var y: []bit32 :: #[@N]bit32
	var z: []bit32 :: #[@N]bit32
	for i(0, @N - 1)
		do x[i] :: 0b32
		do y[i] :: 0b32
	end for
	do y[0] :: 1b32
	
	do @Div(y, m $ bit32)
	do @Dup(y, x)
	do m2 :: (m * m) $ bit32
	var i: int :: 1
	while(e = -1, skip)
		do @Div(y, m2)
		do @Dup(y, z)
		do @Div(z, (2 * i + 1) $ bit32)
		if((i $ bit32).and(1b32) = 0b32)
			do @Add(x, z)
		else
			do @Sub(x, z)
		end if
		do i :+ 1
		do e :: @if_zero(z)
	end while
end func

func Add(a: []bit32, b: []bit32)
	var j: int
	var x: bit32
	for i(0, @N - 1)
		do x :: a[i] + b[i]
		if(x <= 0xFFFFb32)
			do a[i] :: x
		else
			do a[i] :: x.and(0xFFFFb32)
			do j :: i - 1
			while(a[j] = 0xFFFFb32)
				do a[j] :: 0b32
				do j :- 1
			end while
			do a[j] :+ 1b32
		end if
	end for
end func

func Sub(a: []bit32, b: []bit32)
	var j: int
	for i(0, @N - 1)
		if(a[i] >= b[i])
			do a[i] :: a[i] - b[i]
		else
			do a[i] :: 0x10000b32 + a[i] - b[i]
			do j :: i - 1
			while(a[j] = 0b32)
				do a[j] :: 0xFFFFb32
				do j :- 1
			end while
			do a[j] :- 1b32
		end if
	end for
end func

func Div(a: []bit32, d: bit32)
	var x: bit32
	var q: bit32
	var res: bit32
	do res :: 0b32
	for i(0, @N - 1)
		do res :: res.shl(16)
		do x :: a[i] + res
		do q :: x / d
		do a[i] :: q
		do res :: x - q * d
	end for
end func

func Mul(a: []bit32, d: bit32)
	var x: bit32
	var q: bit32
	do q :: 0b32
	for i(@N - 1, 0, -1)
		do x :: a[i] * d + q
		do a[i] :: x.and(0xFFFFb32)
		do q :: x.shr(16)
	end for
end func

func Dup(a: []bit32, b: []bit32)
	for i(0, @N - 1)
		do b[i] :: a[i]
	end for
end func

func if_zero(a: []bit32): int
	var j: int
	do j :: 0
	for i(0, @N - 1)
		if(a[i] <> 0b32)
			do j :: -1
			break i
		end if
	end for
	ret j
end func

func Display(a: []bit32)
	var j: int
	var w: []bit32 :: #[@M]bit32
	do @to_decimal(a, w)
	var str: []char :: ""
	do str :~ (w[0] $ int).toStrFmt("4d") ~ "."
	for i(1, @M - 1)
		do str :~ (w[i] $ int).toStrFmt("04d") ~ " "
		do j :: i % 12
		if(j = 0)
			do str :~ "\n     "
		end if
	end for
	do str :~ "\n"
	do cui@print(str)
end func

func to_decimal(a: []bit32, w: []bit32)
	var b: []bit32 :: #[@N]bit32
	for i(0, @N - 1)
		do b[i] :: a[i]
	end for
	do w[0] :: b[0]
	do b[0] :: 0b32
	for i(1, @M - 1)
		do @Mul(b, 10000b32)
		do w[i] :: b[0]
		do b[0] :: 0b32
	end for
end func
